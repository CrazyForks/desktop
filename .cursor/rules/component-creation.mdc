---
description: Writing a new block component for atuin runbooks
globs: *.tsx, *.ts, *.rs
---
# Creating Components for Atuin Runbooks

Guidelines for creating new component blocks for the Atuin runbook editor.

<rule>
name: atuin_component_creation
description: Standards for creating and implementing component blocks in Atuin Desktop

filters:
  - type: event
    pattern: "file_create"
  - type: file_path
    pattern: "src/components/runbooks/editor/blocks/.*"

actions:
  - type: suggest
    message: |
      # Creating Components for Atuin Desktop
      
      ## Component Types
      
      There are two primary types of components:
      
      1. **Passive Blocks** - Provide context or configuration for other blocks (e.g., Directory, Env, Host)
      2. **Executable Blocks** - Run commands or execute actions (e.g., Run, Script, HTTP)
      
      ## Component Structure
      
      ```
      src/components/runbooks/editor/blocks/[ComponentName]/
      ├── ComponentName.tsx  (or index.tsx)
      └── index.ts           (exports the component)
      ```
      
      ## Implementation Steps
      
      1. **Create Component Directory**
      2. **Create Main Component File**:
         - Use `createReactBlockSpec` to define the block
         - Implement a React component for the UI
      3. **Create Index File** for exports
      4. **Register in Schema** (`create_editor.ts`)
      5. **Add to Menu Items** (`Editor.tsx`) in the appropriate group
      
      ## Component Specification Example
      
      ```typescript
      export default createReactBlockSpec(
        {
          type: "your-component-type", 
          propSchema: {
            property: { default: "default-value" },
          },
          content: "none",
        },
        {
          render: ({ block, editor }) => {
            return <YourComponent {...props} />;
          },
        }
      );
      ```
      
      ## Suggestion Menu Item Example
      
      ```typescript
      export const insertYourComponent = (schema: any) => (editor: typeof schema.BlockNoteEditor) => ({
        title: "Component Name",
        subtext: "Description of component",
        onItemClick: () => {
          insertOrUpdateBlock(editor, {
            type: "your-component-type",
          });
        },
        icon: <SomeIcon size={18} />,
        group: "Appropriate Group", // Network, Execute, Database, etc.
      });
      ```
      
      ## Best Practices
      
      - Follow existing patterns for similar block types
      - Maintain consistent styling with other blocks
      - Add tooltips to explain functionality
      - Group components properly in the menu
      - For passive blocks, use `findFirstParentOfType` to find parent blocks
      - Use `@heroui/react` components and `lucide-react` icons

examples:
  - input: |
      Creating a new Host block component
    output: |
      // Host component (src/components/runbooks/editor/blocks/Host/HostSelect.tsx)
      
      import { Button, Tooltip } from "@heroui/react";
      import { HomeIcon } from "lucide-react";
      import { createReactBlockSpec } from "@blocknote/react";
      import { insertOrUpdateBlock } from "@blocknote/core";
      
      const HostSelect = ({ isEditable }) => (
        <div className="w-full">
          <Tooltip content="Specifies that commands run on the local machine">
            <div className="flex flex-row items-center w-full">
              <div className="mr-2"><HomeIcon size={18} /></div>
              <div className="flex-grow">
                <Button variant="flat" className="w-full justify-start">localhost</Button>
              </div>
            </div>
          </Tooltip>
        </div>
      );
      
      export default createReactBlockSpec(
        {
          type: "host-select",
          propSchema: { host: { default: "local" } },
          content: "none",
        },
        {
          render: ({ block, editor }) => <HostSelect isEditable={editor.isEditable} />
        }
      );
      
      export const insertHostSelect = (schema) => (editor) => ({
        title: "Host",
        subtext: "Specify that commands run on localhost",
        onItemClick: () => { insertOrUpdateBlock(editor, { type: "host-select" }); },
        icon: <HomeIcon size={18} />,
        group: "Network",
      });

metadata:
  priority: medium
  version: 1.0
</rule> 